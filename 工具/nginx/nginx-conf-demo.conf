worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    init_by_lua_block {
        cjson = require "cjson";
        a_global = "hello";
    }
    lua_shared_dict dogs 10m;
    server {
        listen 8080;
        location /test01 {
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello, world</p>")
            }
        }
        location /test02 {
            default_type text/html;
            # init_by_lua*只能放在http结构下
            # init_by_lua_block {
            #     local a = "hello"
            # }
            content_by_lua_block {
                ngx.say(cjson.encode({a=1,b=2}))
                ngx.say(a_global)
            }
        }
        # location /test03 {
        #     content_by_lua_block {
        #         local count1 = ngx.shared.count
        #         count1.incr("c",1)
        #         local value, flag = count1.get("c")
        #         ngx.say(value)
        #     }
        # }
    }
    server {
        listen 8081;
        location /set {
            content_by_lua_block {
                local dogs = ngx.shared.dogs
                dogs:set("Jim", 8)
                ngx.say("STORED")
            }
        }
        location /get {
            content_by_lua_block {
                local dogs = ngx.shared.dogs
                ngx.say(dogs:get("Jim"))
            }
        }
     }
}